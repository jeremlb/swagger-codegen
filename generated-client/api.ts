// tslint:disable
/**
 * Cats example
 * The cats API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CatDto
 */
export interface CatDto {
    /**
     * 
     * @type {number}
     * @memberof CatDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof CatDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CatDto
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof CatDto
     */
    birthDate: string;
}
/**
 * 
 * @export
 * @interface CreateCatDto
 */
export interface CreateCatDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCatDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCatDto
     */
    color: string;
    /**
     * 
     * @type {number}
     * @memberof CreateCatDto
     */
    age: number;
    /**
     * 
     * @type {string}
     * @memberof CreateCatDto
     */
    birthDate: string;
}
/**
 * 
 * @export
 * @interface UpdateCatDto
 */
export interface UpdateCatDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateCatDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCatDto
     */
    color?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateCatDto
     */
    age?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateCatDto
     */
    birthDate?: string;
}

/**
 * CatsApi - axios parameter creator
 * @export
 */
export const CatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateCatDto} createCatDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerCreate: async (createCatDto: CreateCatDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCatDto' is not null or undefined
            if (createCatDto === null || createCatDto === undefined) {
                throw new RequiredError('createCatDto','Required parameter createCatDto was null or undefined when calling appControllerCreate.');
            }
            const localVarPath = `/v1/cats`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createCatDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createCatDto !== undefined ? createCatDto : {}) : (createCatDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling appControllerDelete.');
            }
            const localVarPath = `/v1/cats/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] search cat by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetAll: async (name?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/cats`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetbyId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling appControllerGetbyId.');
            }
            const localVarPath = `/v1/cats/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateCatDto} updateCatDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerUpdate: async (id: number, updateCatDto: UpdateCatDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling appControllerUpdate.');
            }
            // verify required parameter 'updateCatDto' is not null or undefined
            if (updateCatDto === null || updateCatDto === undefined) {
                throw new RequiredError('updateCatDto','Required parameter updateCatDto was null or undefined when calling appControllerUpdate.');
            }
            const localVarPath = `/v1/cats/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateCatDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateCatDto !== undefined ? updateCatDto : {}) : (updateCatDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatsApi - functional programming interface
 * @export
 */
export const CatsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateCatDto} createCatDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerCreate(createCatDto: CreateCatDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatDto>> {
            const localVarAxiosArgs = await CatsApiAxiosParamCreator(configuration).appControllerCreate(createCatDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CatsApiAxiosParamCreator(configuration).appControllerDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [name] search cat by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetAll(name?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatDto>>> {
            const localVarAxiosArgs = await CatsApiAxiosParamCreator(configuration).appControllerGetAll(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetbyId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatDto>> {
            const localVarAxiosArgs = await CatsApiAxiosParamCreator(configuration).appControllerGetbyId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateCatDto} updateCatDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerUpdate(id: number, updateCatDto: UpdateCatDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatDto>> {
            const localVarAxiosArgs = await CatsApiAxiosParamCreator(configuration).appControllerUpdate(id, updateCatDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CatsApi - factory interface
 * @export
 */
export const CatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {CreateCatDto} createCatDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerCreate(createCatDto: CreateCatDto, options?: any): AxiosPromise<CatDto> {
            return CatsApiFp(configuration).appControllerCreate(createCatDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerDelete(id: number, options?: any): AxiosPromise<void> {
            return CatsApiFp(configuration).appControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [name] search cat by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetAll(name?: string, options?: any): AxiosPromise<Array<CatDto>> {
            return CatsApiFp(configuration).appControllerGetAll(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetbyId(id: number, options?: any): AxiosPromise<CatDto> {
            return CatsApiFp(configuration).appControllerGetbyId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateCatDto} updateCatDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerUpdate(id: number, updateCatDto: UpdateCatDto, options?: any): AxiosPromise<CatDto> {
            return CatsApiFp(configuration).appControllerUpdate(id, updateCatDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CatsApi - object-oriented interface
 * @export
 * @class CatsApi
 * @extends {BaseAPI}
 */
export class CatsApi extends BaseAPI {
    /**
     * 
     * @param {CreateCatDto} createCatDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatsApi
     */
    public appControllerCreate(createCatDto: CreateCatDto, options?: any) {
        return CatsApiFp(this.configuration).appControllerCreate(createCatDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatsApi
     */
    public appControllerDelete(id: number, options?: any) {
        return CatsApiFp(this.configuration).appControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [name] search cat by name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatsApi
     */
    public appControllerGetAll(name?: string, options?: any) {
        return CatsApiFp(this.configuration).appControllerGetAll(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatsApi
     */
    public appControllerGetbyId(id: number, options?: any) {
        return CatsApiFp(this.configuration).appControllerGetbyId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateCatDto} updateCatDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatsApi
     */
    public appControllerUpdate(id: number, updateCatDto: UpdateCatDto, options?: any) {
        return CatsApiFp(this.configuration).appControllerUpdate(id, updateCatDto, options).then((request) => request(this.axios, this.basePath));
    }

}


